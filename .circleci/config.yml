version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
      

jobs:

    create-server:
        executor: aws
      
        steps:
            - checkout   
            - add_ssh_keys:
                fingerprints: ["d3:39:d3:16:84:f9:c9:1c:46:78:a1:f9:ab:5c:71:6f"]
    
            - run:
                name: Install dependencies
                command: yum install -y tar gzip
                
            - run:
                name: Deploy backend infrastructure
                working_directory: ./.circleci
                command: |
                    aws cloudformation deploy \
                    --template-file server.yml \
                    --stack-name "MLearning-MicroService-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=MLearning-MicroService-${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                name: Save backend URL in memstash
                command: |
                    SERVER_IP=$(aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=MLearning-MicroService-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text)
            
                        
                    curl -H "Content-Type: text/plain" -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678" --request PUT --data "http://$SERVER_IP" https://api.memstash.io/values/SERVER_URL
                    IP=$(curl -H "Content-Type: text/plain" -H "token: 1e288415-cfc8-4a0a-a23c-087eb7cd7678"  --request GET https://api.memstash.io/values/SERVER_URL)
                    echo "${IP}"
            
                    
            

    build-server:
        docker:
            - image: circleci/python:3.7
        steps:
            - checkout

            - restore_cache:
                  keys:
                      # Find a cache corresponding to this specific requirements.txt checksum
                      # when this file is changed, this key will fail
                      - v1-pip-deps-{{ checksum "requirements.txt" }}
                      # Find the most recently generated cache used from any branch
                      - v1-pip-deps-

            - run:
                  name: Install python dependencies
                  command: |
                      make setup
                      source ~/.devops/bin/activate
                      make install

            - save_cache:
                  key: v1-pip-deps-{{ checksum "requirements.txt" }}
                  paths:
                      - ~/.devops

            - run:
                  name: Install hadolint
                  command: |
                      sudo make install-hadolint

            - run:
                  name: Run Lint
                  command: |
                      source ~/.devops/bin/activate
                      make lint

            - run:
                  name: Run Tests
                  command: |
                      source ~/.devops/bin/activate
                      make test-junit

            - store_test_results:
                  path: ~/test-results

            - store_artifacts:
                  path: ~/test-results

workflows:
    main:
        jobs:
            - create-server
            - build-server
